# This module contains function helpful in startign placement session in the beginning of the AUTUMN semester

# XXX : DO NOT use any of these functions in your views.

import xlrd

from placement.models import *
from placement import maps
from placement.policy import current_session_year

from nucleus.models import Person

import sys

def generate_registration_no() :
  """
    Generates the registraion no field of Placement.models.PlacementInformation
    PRE REQUISITE : Person model is already updated
                    Status of all students sitting in placement is OPN
  """
  plac_persons = PlacementPerson.objects.filter(person__passout_year = None, status__in = ('OPN', 'LCK'))
  total = plac_persons.count()
  for (i, plac) in enumerate(plac_persons) :
    person = plac.person
    info = PlacementInformation.objects.get_or_create(person = person)[0]
    info.registration_no  = person.branch.degree + '/' + person.branch.code + '/' + person.user.username + '/'
    year = current_session_year() + 1
    info.registration_no += str(year)
    info.save()
    if i%100 == 0 :
      print '\r%d/%d' % (i, total),
      sys.stdout.flush()
  print '\r%d/%d' % (total, total)

def generate_cgpa() :
  """
    Generates data for the CGPA field in person table from the Placement.EducationalDetails
    model. The Nucleus.Person model should be updated at the moment Educationaldetails are updated.
    This should not be used in normal conditions!
  """
  persons = Person.objects.filter(passout_year = None, branch__graduation__in = ['UG','PG'])
  total = persons.count()
  for (i, person) in enumerate(persons) :
    e = EducationalDetails.objects.filter(person = person, course__startswith = person.branch.graduation).order_by('-course')
    if e :
      person.cgpa = e[0].cgpa
      person.save()
    else :
      person.cgpa = ''
    if i%100 == 0 :
      print '\r%d/%d' % (i, total),
      sys.stdout.flush()
  print '\r%d/%d' % (total, total)

def upload_ug_edu_details() :
  """
  Uploads edu details from a .xls file generated by CampusLynx.
  See the sample file at : placement/samples/CGPA_UG.xls file.
  """
  wb = xlrd.open_workbook("/home/shaumik/CGPA_UG.xls")
  sheet = wb.sheet_by_index(0)
  #Check if xls sheet has data of all semesters
  delete_old_data = True
  if delete_old_data :
    enrollment_nos = set(sheet.col_values(0)[1:])
    courses = [b for a,b in maps.SEM_CONV.items()]
    a = EducationalDetails.objects.filter(person__user__username__in = enrollment_nos, course__in = courses)
    count = a.count()
    a.delete()
    print 'Deleted ',count,'rows'
  for rownum in range(1,sheet.nrows) :
    enrollment_no = sheet.cell(rownum, 0).value
    sem           = maps.SEM_CONV[sheet.cell(rownum, 1).value]
    cgpa          = sheet.cell(rownum, 2).value
    sgpa          = sheet.cell(rownum, 3).value
    year          = int(sheet.cell(rownum, 1).value[1])  # year of clearing the sem
    if int(sheet.cell(rownum, 1).value[2]) == 0 :
      year -= 1
    person = Person.objects.get(user__username = enrollment_no)
    year += int(person.admission_year)
    EducationalDetails.objects.create(person = person,
                                      year = year,
                                      sgpa = sgpa,
                                      cgpa = cgpa,
                                      course = sem,
                                      institution = 'IIT Roorkee',
                                      discipline = person.branch.code)
    if rownum%100 == 0 :
      print '%d/%d\r' % (rownum, sheet.nrows),
      sys.stdout.flush()
  print sheet.nrows, '/', sheet.nrows
